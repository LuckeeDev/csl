datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                 String  @id @default(cuid())
    userId             String
    type               String
    provider           String
    providerAccountId  String
    refresh_token      String? @db.Text
    access_token       String? @db.Text
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String? @db.Text
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    accounts      Account[]
    roles         Role[]
    orders        Order[]
    bookings      Booking[]
    groups        Group[]   @relation("groups")
    managedGroups Group[]   @relation("groupManagers")

    serviceAccount ServiceAccount?
}

model ServiceAccount {
    id    String @id @default(cuid())
    name  String
    email String @unique
    image String

    refreshToken String

    user   User   @relation(fields: [userId], references: [id])
    userId String @unique
}

model Group {
    id       String @id @default(cuid())
    name     String
    users    User[] @relation("groups")
    managers User[] @relation("groupManagers")
}

model Role {
    id    String @id @default(cuid())
    name  String
    users User[]

    permissions Permission[]

    updated_at DateTime @updatedAt
    created_at DateTime @default(now())
}

model Article {
    id          String  @id @default(cuid())
    title       String
    content     String
    author      String
    readingTime Int
    published   Boolean @default(false)

    category   ArticleCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId String

    updated_at DateTime @updatedAt
    created_at DateTime @default(now())
}

model ArticleCategory {
    id       String    @id @default(cuid())
    name     String
    color    String
    articles Article[]

    updated_at DateTime @updatedAt
    created_at DateTime @default(now())
}

model Product {
    id          String        @id @default(cuid())
    name        String
    description String?
    price       Int
    sizes       ProductSize[]
    colors      String[]

    category      ProductCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId    String
    shopSession   ShopSession     @relation(fields: [shopSessionId], references: [id], onDelete: Cascade)
    shopSessionId String
    images        Image[]
    orders        Order[]

    updated_at DateTime @updatedAt
    created_at DateTime @default(now())
}

model ProductCategory {
    id       String    @id @default(cuid())
    name     String
    products Product[]

    requiredForDiscounts ProductDiscount[] @relation("requiredForDiscounts")
    applicableDiscounts  ProductDiscount[] @relation("applicableDiscounts")

    updated_at DateTime @updatedAt
    created_at DateTime @default(now())
}

model ProductDiscount {
    id            String      @id @default(cuid())
    name          String
    shopSession   ShopSession @relation(fields: [shopSessionId], references: [id], onDelete: Cascade)
    shopSessionId String

    discountPercentage Int

    requiredCategory   ProductCategory @relation("requiredForDiscounts", fields: [requiredCategoryId], references: [id], onDelete: Cascade)
    requiredCategoryId String
    requiredQuantity   Int

    discountedCategory   ProductCategory @relation("applicableDiscounts", fields: [discountedCategoryId], references: [id], onDelete: Cascade)
    discountedCategoryId String
    discountedQuantity   Int

    updated_at DateTime @updatedAt
    created_at DateTime @default(now())
}

model ShopSession {
    id   String @id @default(cuid())
    name String

    products  Product[]
    discounts ProductDiscount[]

    start DateTime
    end   DateTime

    updated_at DateTime @updatedAt
    created_at DateTime @default(now())
}

model Image {
    id String @id @default(cuid())

    name String
    type String
    url  String

    nativeWidth  Int?
    nativeHeight Int?

    products Product[]

    updated_at DateTime @updatedAt
    created_at DateTime @default(now())
}

model Order {
    id String @id @default(cuid())

    product   Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String
    quantity  Int
    size      ProductSize?
    color     String?

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    updated_at DateTime @updatedAt
    created_at DateTime @default(now())
}

model Event {
    id   String @id @default(cuid())
    name String

    timeSlots TimeSlot[]

    updated_at DateTime @updatedAt
    created_at DateTime @default(now())
}

model TimeSlot {
    id   String @id @default(cuid())
    name String

    event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
    eventId String

    seminars Seminar[]

    start DateTime
    end   DateTime

    updated_at DateTime @updatedAt
    created_at DateTime @default(now())
}

model Seminar {
    id          String @id @default(cuid())
    name        String
    description String
    location    String

    timeSlot    TimeSlot  @relation(fields: [timeSlotId], references: [id], onDelete: Cascade)
    timeSlotId  String
    maxBookings Int
    bookings    Booking[]

    updated_at DateTime @updatedAt
    created_at DateTime @default(now())
}

model Booking {
    id String @id @default(cuid())

    seminar   Seminar @relation(fields: [seminarId], references: [id], onDelete: Cascade)
    seminarId String
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String

    updated_at DateTime @updatedAt
    created_at DateTime @default(now())

    @@unique([seminarId, userId])
}

enum Permission {
    NEWS_EDITOR
    SHOP_MANAGER
    USERS_MANAGER
    EVENTS_MANAGER
}

enum ProductSize {
    U
    XXXS
    XXS
    XS
    S
    M
    L
    XL
    XXL
    XXXL
}
